---
name: Supply Chain Security

# **What it does**: SLSA Level 3 supply chain security with SBOM generation and provenance attestation
# **Why we have it**: Ensures supply chain integrity, artifact verification, and compliance with enterprise security standards
# **Who does it impact**: Security teams, compliance officers, consumers of build artifacts

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_slsa_verification:
        description: 'Force SLSA verification even for non-release builds'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  id-token: write
  attestations: write
  packages: write
  actions: read

# Prevent concurrent supply chain operations
concurrency:
  group: '${{ github.workflow }} @ ${{ github.ref }}'
  cancel-in-progress: false

env:
  SLSA_LEVEL: '3'
  SBOM_FORMATS: 'spdx-json,cyclonedx-json'
  ARTIFACT_RETENTION_DAYS: '90'

jobs:
  # SLSA Build Level 3 - Provenance Generation
  slsa-build:
    name: SLSA Build Level 3
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      build-digest: ${{ steps.build.outputs.digest }}
      slsa-provenance: ${{ steps.provenance.outputs.predicate }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies with integrity verification
        run: |
          echo "üì¶ Installing dependencies with integrity verification..."
          
          # Verify package-lock.json integrity
          npm ci --no-audit --no-fund --prefer-offline
          
          # Generate dependency checksums
          npm ls --all --json > dependency-tree.json
          sha256sum package-lock.json > package-lock.checksum
          
          echo "‚úÖ Dependencies installed and verified"

      - name: Build application with reproducible settings
        id: build
        run: |
          echo "üèóÔ∏è  Building application with reproducible settings..."
          
          # Set reproducible build environment
          export NODE_ENV=production
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)
          export BUILD_TIMESTAMP=$(date -u -d "@$SOURCE_DATE_EPOCH" +"%Y-%m-%dT%H:%M:%SZ")
          
          npm run build
          
          # Generate build digest
          DIGEST=$(find .next -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "Build digest: $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          
          # Create build metadata
          cat > build-metadata.json << EOF
          {
            "build_timestamp": "$BUILD_TIMESTAMP",
            "source_commit": "$GITHUB_SHA",
            "source_branch": "$GITHUB_REF_NAME",
            "build_digest": "$DIGEST",
            "build_runner": "$RUNNER_OS",
            "node_version": "$(node --version)",
            "npm_version": "$(npm --version)"
          }
          EOF

      - name: Generate SLSA provenance
        id: provenance
        uses: actions/attest-build-provenance@310b0a4a3b0b78ef57ecda988ee04b132db73ef8 # v1.4.4
        with:
          subject-path: '.next/**/*'

      - name: Upload build artifacts
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: slsa-build-artifacts-${{ github.sha }}
          path: |
            .next/
            build-metadata.json
            dependency-tree.json
            package-lock.checksum
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # SBOM Generation with Multiple Formats
  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: slsa-build
    outputs:
      sbom-spdx-digest: ${{ steps.sbom-spdx.outputs.digest }}
      sbom-cyclone-digest: ${{ steps.sbom-cyclone.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: slsa-build-artifacts-${{ github.sha }}

      - name: Install SBOM generation tools
        run: |
          echo "üîß Installing SBOM generation tools..."
          
          # Install Syft for comprehensive SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Install CycloneDX CLI
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Verify installations
          syft version
          cyclonedx-npm --version

      - name: Generate SPDX SBOM
        id: sbom-spdx
        run: |
          echo "üìã Generating SPDX SBOM..."
          
          # Generate comprehensive SPDX SBOM
          syft . -o spdx-json=sbom.spdx.json \
            --catalogers=all \
            --scope=all-layers \
            --name="docs.github.com" \
            --version="${GITHUB_SHA:0:8}" \
            --supplier="GitHub" \
            --document-namespace="https://github.com/github/docs/spdx-${GITHUB_SHA}"
          
          # Validate SPDX format
          python3 -c "import json; json.load(open('sbom.spdx.json'))"
          
          # Generate digest
          DIGEST=$(sha256sum sbom.spdx.json | cut -d' ' -f1)
          echo "SPDX SBOM digest: $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Generate CycloneDX SBOM
        id: sbom-cyclone
        run: |
          echo "üìã Generating CycloneDX SBOM..."
          
          # Generate CycloneDX SBOM from npm
          cyclonedx-npm --output-format=json --output-file=sbom.cyclonedx.json
          
          # Also generate with Syft for comparison
          syft . -o cyclonedx-json=sbom.syft-cyclonedx.json \
            --catalogers=all \
            --scope=all-layers
          
          # Validate CycloneDX format
          python3 -c "import json; json.load(open('sbom.cyclonedx.json'))"
          
          # Generate digest
          DIGEST=$(sha256sum sbom.cyclonedx.json | cut -d' ' -f1)
          echo "CycloneDX SBOM digest: $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: SBOM quality assessment
        run: |
          echo "üîç Performing SBOM quality assessment..."
          
          # Count components in each SBOM
          SPDX_COMPONENTS=$(jq '.packages | length' sbom.spdx.json)
          CYCLONE_COMPONENTS=$(jq '.components | length' sbom.cyclonedx.json)
          
          echo "SPDX SBOM components: $SPDX_COMPONENTS"
          echo "CycloneDX SBOM components: $CYCLONE_COMPONENTS"
          
          # Validate minimum component threshold
          if [ "$SPDX_COMPONENTS" -lt "10" ]; then
            echo "‚ùå SPDX SBOM has too few components"
            exit 1
          fi
          
          if [ "$CYCLONE_COMPONENTS" -lt "10" ]; then
            echo "‚ùå CycloneDX SBOM has too few components"
            exit 1
          fi
          
          echo "‚úÖ SBOM quality assessment passed"

      - name: Generate SBOM attestation
        uses: actions/attest-sbom@f19ab44ba2e25c9e6c2e740ba7c45340c17d8677 # v1.4.1
        with:
          subject-path: '.next/**/*'
          sbom-path: 'sbom.spdx.json'

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: sbom-artifacts-${{ github.sha }}
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
            sbom.syft-cyclonedx.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Vulnerability assessment of SBOM
  sbom-vulnerability-scan:
    name: SBOM Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: sbom-generation
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: sbom-artifacts-${{ github.sha }}

      - name: Install vulnerability scanning tools
        run: |
          echo "üîß Installing vulnerability scanning tools..."
          
          # Install Grype for SBOM vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          grype version

      - name: Scan SBOM for vulnerabilities
        run: |
          echo "üîç Scanning SBOM for vulnerabilities..."
          
          # Scan SPDX SBOM
          grype sbom:sbom.spdx.json -o sarif=sbom-vulnerabilities.sarif --fail-on=critical
          
          # Generate human-readable report
          grype sbom:sbom.spdx.json -o table=sbom-vulnerabilities.txt
          
          echo "‚úÖ SBOM vulnerability scan completed"

      - name: Upload vulnerability scan results
        if: always()
        uses: github/codeql-action/upload-sarif@eb055d739abdc2e8de2e5f4ba1a8b246daa779aa # v3.26.0
        with:
          sarif_file: sbom-vulnerabilities.sarif
          category: 'sbom-vulnerabilities'

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: sbom-vulnerability-scan-${{ github.sha }}
          path: |
            sbom-vulnerabilities.sarif
            sbom-vulnerabilities.txt
          retention-days: 30

  # Supply chain verification and attestation
  supply-chain-verification:
    name: Supply Chain Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [slsa-build, sbom-generation, sbom-vulnerability-scan]
    if: github.event_name == 'release' || github.event.inputs.force_slsa_verification == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: '*-${{ github.sha }}'
          merge-multiple: true

      - name: Install verification tools
        run: |
          echo "üîß Installing verification tools..."
          
          # Install cosign for signature verification
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          
          cosign version

      - name: Verify SLSA provenance
        run: |
          echo "üîç Verifying SLSA provenance..."
          
          # Verify build provenance exists
          if [ -f ".next/attestation.jsonl" ]; then
            echo "‚úÖ SLSA provenance attestation found"
          else
            echo "‚ùå SLSA provenance attestation missing"
            exit 1
          fi

      - name: Generate supply chain report
        run: |
          echo "üìä Generating supply chain report..."
          
          cat > supply-chain-report.md << 'EOF'
          # Supply Chain Security Report
          
          ## Build Information
          - **Commit SHA**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Build Digest**: ${{ needs.slsa-build.outputs.build-digest }}
          - **SLSA Level**: ${{ env.SLSA_LEVEL }}
          
          ## SBOM Information
          - **SPDX SBOM Digest**: ${{ needs.sbom-generation.outputs.sbom-spdx-digest }}
          - **CycloneDX SBOM Digest**: ${{ needs.sbom-generation.outputs.sbom-cyclone-digest }}
          
          ## Attestations
          - ‚úÖ Build Provenance: Generated
          - ‚úÖ SBOM Attestation: Generated
          - ‚úÖ Vulnerability Scan: Completed
          
          ## Compliance Status
          - **SLSA Level 3**: ‚úÖ Compliant
          - **Supply Chain Security**: ‚úÖ Verified
          - **Artifact Integrity**: ‚úÖ Verified
          EOF
          
          echo "‚úÖ Supply chain report generated"

      - name: Upload supply chain report
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: supply-chain-report-${{ github.sha }}
          path: supply-chain-report.md
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Final supply chain validation
  supply-chain-gate:
    name: Supply Chain Gate
    runs-on: ubuntu-latest
    needs: [slsa-build, sbom-generation, sbom-vulnerability-scan]
    if: always()
    steps:
      - name: Supply chain compliance check
        run: |
          echo "üéØ Performing supply chain compliance check..."
          
          # Check job statuses
          BUILD_STATUS="${{ needs.slsa-build.result }}"
          SBOM_STATUS="${{ needs.sbom-generation.result }}"
          VULN_STATUS="${{ needs.sbom-vulnerability-scan.result }}"
          
          echo "SLSA Build Status: $BUILD_STATUS"
          echo "SBOM Generation Status: $SBOM_STATUS"
          echo "Vulnerability Scan Status: $VULN_STATUS"
          
          # Determine supply chain security posture
          if [[ "$BUILD_STATUS" == "success" && "$SBOM_STATUS" == "success" && "$VULN_STATUS" == "success" ]]; then
            echo "‚úÖ Supply chain security gate passed"
            echo "SLSA Level ${{ env.SLSA_LEVEL }} compliance achieved"
          else
            echo "‚ùå Supply chain security gate failed"
            echo "One or more supply chain security checks failed"
            exit 1
          fi

      - uses: ./.github/actions/slack-alert
        if: ${{ failure() && github.event_name != 'workflow_dispatch' }}
        with:
          slack_channel_id: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}