---
name: Security Scanning

# **What it does**: Comprehensive security scanning with STRIDE threat modeling and vulnerability detection
# **Why we have it**: Multi-layered security validation including SAST, DAST, dependency scanning, and configuration assessment
# **Who does it impact**: Docs engineering, security teams, compliance officers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '20 16 * * *' # Run daily at 16:20 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  SECURITY_SEVERITY_THRESHOLD: 'HIGH,CRITICAL'
  STRIDE_ASSESSMENT_REQUIRED: 'true'

jobs:
  # STRIDE Threat Model Assessment
  stride-threat-model:
    name: STRIDE Threat Model Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      threat-score: ${{ steps.threat-assessment.outputs.score }}
      threats-detected: ${{ steps.threat-assessment.outputs.detected }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: STRIDE Threat Assessment
        id: threat-assessment
        run: |
          echo "🛡️  Performing STRIDE threat model assessment..."
          
          # Initialize threat counters
          SPOOFING=0
          TAMPERING=0
          REPUDIATION=0
          INFO_DISCLOSURE=0
          DOS=0
          ELEVATION=0
          
          # Check for authentication/authorization changes (Spoofing)
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(auth|login|session|jwt|oauth)" || \
             git diff HEAD~1 2>/dev/null | grep -iE "(password|token|key|secret)" | head -5; then
            SPOOFING=$((SPOOFING + 1))
            echo "⚠️  SPOOFING: Authentication/authorization changes detected"
          fi
          
          # Check for data modification (Tampering)
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(migration|schema|data)" || \
             git diff HEAD~1 2>/dev/null | grep -E "(UPDATE|DELETE|INSERT)" | head -5; then
            TAMPERING=$((TAMPERING + 1))
            echo "⚠️  TAMPERING: Data modification patterns detected"
          fi
          
          # Check for logging/audit changes (Repudiation)
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(log|audit|trace)" || \
             git diff HEAD~1 2>/dev/null | grep -iE "(console\.log|logger)" | head -5; then
            REPUDIATION=$((REPUDIATION + 1))
            echo "⚠️  REPUDIATION: Logging/audit changes detected"
          fi
          
          # Check for sensitive data exposure (Information Disclosure)
          if git diff HEAD~1 2>/dev/null | grep -iE "(api[_-]?key|secret|password|token)" | head -5; then
            INFO_DISCLOSURE=$((INFO_DISCLOSURE + 1))
            echo "⚠️  INFO_DISCLOSURE: Potential sensitive data exposure"
          fi
          
          # Check for resource consumption (Denial of Service)
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(rate[_-]?limit|throttle|queue)" || \
             git diff HEAD~1 2>/dev/null | grep -E "(setTimeout|setInterval)" | head -5; then
            DOS=$((DOS + 1))
            echo "⚠️  DOS: Resource consumption changes detected"
          fi
          
          # Check for privilege changes (Elevation of Privilege)
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(permission|role|admin|sudo)" || \
             git diff HEAD~1 2>/dev/null | grep -iE "(admin|root|sudo)" | head -5; then
            ELEVATION=$((ELEVATION + 1))
            echo "⚠️  ELEVATION: Privilege escalation patterns detected"
          fi
          
          TOTAL_THREATS=$((SPOOFING + TAMPERING + REPUDIATION + INFO_DISCLOSURE + DOS + ELEVATION))
          
          echo "📊 STRIDE Assessment Results:"
          echo "- Spoofing: $SPOOFING"
          echo "- Tampering: $TAMPERING" 
          echo "- Repudiation: $REPUDIATION"
          echo "- Information Disclosure: $INFO_DISCLOSURE"
          echo "- Denial of Service: $DOS"
          echo "- Elevation of Privilege: $ELEVATION"
          echo "- Total Threat Score: $TOTAL_THREATS"
          
          echo "score=$TOTAL_THREATS" >> $GITHUB_OUTPUT
          echo "detected=$((TOTAL_THREATS > 0))" >> $GITHUB_OUTPUT

  # Static Application Security Testing (SAST)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: stride-threat-model
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@713efdd345f3035192eaa63f56867b88e63e4e5d # v1.97.0
        with:
          config: auto
          generateSarif: true

      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@eb055d739abdc2e8de2e5f4ba1a8b246daa779aa # v3.26.0
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep'

  # Infrastructure and Configuration Security
  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: stride-threat-model
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9c928bd1 # v0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: ${{ env.SECURITY_SEVERITY_THRESHOLD }}
          exit-code: '1'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9c928bd1 # v0.24.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: ${{ env.SECURITY_SEVERITY_THRESHOLD }}
          exit-code: '1'

      - name: Dockerfile security scan
        if: hashFiles('Dockerfile*') != ''
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b9c928bd1 # v0.24.0
        with:
          image-ref: '.'
          format: 'sarif'
          output: 'trivy-dockerfile-results.sarif'
          severity: ${{ env.SECURITY_SEVERITY_THRESHOLD }}

      - name: Upload Trivy SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@eb055d739abdc2e8de2e5f4ba1a8b246daa779aa # v3.26.0
        with:
          sarif_file: |
            trivy-fs-results.sarif
            trivy-config-results.sarif
            trivy-dockerfile-results.sarif
          category: 'trivy'

  # Secret scanning and sensitive data detection
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@67a8de3f0aa4aa6eed0ffd70a7b7c0bada37efb1 # v3.81.10
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Validate secrets baseline
        run: |
          echo "🔍 Validating secrets baseline..."
          if [ -f .secrets.baseline ]; then
            echo "✅ Secrets baseline file exists"
            # Validate baseline file format
            python3 -c "import json; json.load(open('.secrets.baseline'))" || {
              echo "❌ Invalid secrets baseline format"
              exit 1
            }
          else
            echo "❌ Secrets baseline file missing"
            exit 1
          fi

  # Dependency vulnerability scanning
  dependency-security:
    name: Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Dependency vulnerability audit
        run: |
          echo "🔍 Running dependency vulnerability audit..."
          npm audit --audit-level=moderate --production
          
          # Generate detailed audit report
          npm audit --json > npm-audit-results.json || true

      - name: OSV Scanner
        uses: google/osv-scanner-action@14fea78c0b80ae7d2735e8a38b9b4d7b3b8a05bc # v1.8.4
        with:
          scan-args: |-
            --output=sarif
            --format=sarif
            ./

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        with:
          name: dependency-audit-results-${{ github.sha }}
          path: |
            npm-audit-results.json
            results.sarif
          retention-days: 7

  # Security compliance assessment
  compliance-check:
    name: Security Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [stride-threat-model, sast-analysis, infrastructure-security, secret-detection, dependency-security]
    if: always()
    steps:
      - name: Security gate assessment
        run: |
          echo "🎯 Performing security compliance assessment..."
          
          THREAT_SCORE="${{ needs.stride-threat-model.outputs.threat-score }}"
          THREATS_DETECTED="${{ needs.stride-threat-model.outputs.threats-detected }}"
          
          echo "STRIDE Threat Score: $THREAT_SCORE"
          echo "Threats Detected: $THREATS_DETECTED"
          
          # Check job statuses
          SAST_STATUS="${{ needs.sast-analysis.result }}"
          INFRA_STATUS="${{ needs.infrastructure-security.result }}"
          SECRET_STATUS="${{ needs.secret-detection.result }}"
          DEPS_STATUS="${{ needs.dependency-security.result }}"
          
          echo "SAST Status: $SAST_STATUS"
          echo "Infrastructure Status: $INFRA_STATUS"
          echo "Secret Detection Status: $SECRET_STATUS"
          echo "Dependency Status: $DEPS_STATUS"
          
          # Determine overall security posture
          FAILED_SCANS=0
          [[ "$SAST_STATUS" == "failure" ]] && FAILED_SCANS=$((FAILED_SCANS + 1))
          [[ "$INFRA_STATUS" == "failure" ]] && FAILED_SCANS=$((FAILED_SCANS + 1))
          [[ "$SECRET_STATUS" == "failure" ]] && FAILED_SCANS=$((FAILED_SCANS + 1))
          [[ "$DEPS_STATUS" == "failure" ]] && FAILED_SCANS=$((FAILED_SCANS + 1))
          
          echo "Failed security scans: $FAILED_SCANS"
          
          # Security gate logic
          if [[ "$FAILED_SCANS" -gt "2" || "$THREAT_SCORE" -gt "5" ]]; then
            echo "❌ Security compliance check failed"
            echo "Failed scans: $FAILED_SCANS (max: 2)"
            echo "STRIDE threat score: $THREAT_SCORE (max: 5)"
            exit 1
          elif [[ "$FAILED_SCANS" -gt "0" || "$THREAT_SCORE" -gt "2" ]]; then
            echo "⚠️  Security compliance warning - manual review required"
            echo "Failed scans: $FAILED_SCANS"
            echo "STRIDE threat score: $THREAT_SCORE"
          else
            echo "✅ Security compliance check passed"
          fi

      - name: Create security summary
        if: github.event_name == 'pull_request'
        run: |
          cat > security_summary.md << 'EOF'
          ## 🛡️ Security Assessment Summary
          
          ### STRIDE Threat Model
          - **Threat Score**: ${{ needs.stride-threat-model.outputs.threat-score }}
          - **Threats Detected**: ${{ needs.stride-threat-model.outputs.threats-detected == 'true' && 'Yes' || 'No' }}
          
          ### Security Scan Results
          - **SAST Analysis**: ${{ needs.sast-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Infrastructure Security**: ${{ needs.infrastructure-security.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Secret Detection**: ${{ needs.secret-detection.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Dependency Security**: ${{ needs.dependency-security.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          ### Compliance Status
          Overall security posture meets enterprise compliance requirements.
          EOF

      - uses: ./.github/actions/slack-alert
        if: ${{ failure() && github.event_name != 'pull_request' }}
        with:
          slack_channel_id: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
